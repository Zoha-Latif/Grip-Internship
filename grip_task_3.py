# -*- coding: utf-8 -*-
"""Grip task 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VrJW2PLrqmB2AZHyM-9lPM4ylRBY66Vn
"""

#Indian Sport Premier dataset
#Step
#import dataset , validate and check basic detaisl of dataset
#Analyze best team , best palyer and contrubuting factors
#present vsiually

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('matches.csv')

# Step 1: Inspect the Dataset
print("Dataset Overview:")
print(df.info())
print("\nMissing Values:")
print(df.isnull().sum())
print("\nSample Data:")
print(df.head())

# Step 2: Data Cleaning
# Fill or drop missing values as necessary
df.dropna(subset=['winner', 'player_of_match'], inplace=True)



# Step 3: Analyze Team Performance
# Most successful team
team_wins = df['winner'].value_counts()
print("Most Successful Teams:")
print(team_wins)

# Win percentage for each team
matches_played = df['team1'].value_counts() + df['team2'].value_counts()
win_percentage = (team_wins / matches_played) * 100
print("\nWin Percentage by Team:")
print(win_percentage)

# Step 4: Analyze Player Performance
# Most valuable players
top_players = df['player_of_match'].value_counts().head(10)
print("\nTop Players by 'Player of the Match' Awards:")
print(top_players)



# Toss effect
toss_win_match_win = df[df['toss_winner'] == df['winner']].shape[0]
toss_win_total = df.shape[0]
toss_effectiveness = (toss_win_match_win / toss_win_total) * 100
print(f"Toss Win Effectiveness: {toss_effectiveness:.2f}%")

# Home advantage (if applicable)
home_advantage = df[df['city'] == df['venue']].groupby('winner').size()
print("\nHome Advantage Effect by Team:")
print(home_advantage)

# Step 6: Recommend Endorsements
# Consider top players and successful teams
recommend_team = team_wins.idxmax()
recommend_player = top_players.idxmax()
print(f"\nRecommendation: Endorse Team '{recommend_team}' and Player '{recommend_player}'")

# Step 7: Visualize Findings
# Team success visualization
plt.figure(figsize=(10, 6))
sns.barplot(x=team_wins.index, y=team_wins.values, palette='viridis')
plt.title('Most Successful Teams')
plt.xlabel('Teams')
plt.ylabel('Number of Wins')
plt.xticks(rotation=90)
plt.show()

# Player success visualization
plt.figure(figsize=(10, 6))
sns.barplot(x=top_players.index, y=top_players.values, palette='rocket')
plt.title('Top Players by Player of the Match Awards')
plt.xlabel('Players')
plt.ylabel('Number of Awards')
plt.xticks(rotation=90)
plt.show()

# Toss effectiveness visualization
labels = ['Toss Win & Match Win', 'Toss Loss or Match Loss']
sizes = [toss_win_match_win, df.shape[0] - toss_win_match_win]
colors = ['#ff9999','#66b3ff']
plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)
plt.title('Toss Win Effectiveness on Match Outcome')
plt.show()